name: CI/CD Pipeline with Coverage Tracking

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Backend Tests with Coverage
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd assignment-11/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run backend tests with coverage
      run: |
        cd assignment-11/backend
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=90 -v tests/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: assignment-11/backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: assignment-11/backend/htmlcov/
        
  # Frontend Tests with Coverage
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: assignment-11/frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd assignment-11/frontend
        npm ci
        
    - name: Run frontend tests with coverage
      run: |
        cd assignment-11/frontend
        npm test -- --coverage --watchAll=false --passWithNoTests
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: assignment-11/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        
    - name: Upload frontend coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage-report
        path: assignment-11/frontend/coverage/
        
  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd assignment-11/backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
        cd ../frontend
        npm ci
        
    - name: Start backend server
      run: |
        cd assignment-11/backend
        python run.py &
        sleep 10
        
    - name: Run integration tests
      run: |
        cd assignment-11/backend
        pytest tests/test_integration.py -v
        
  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        cd assignment-11/backend
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-report
        path: assignment-11/backend/bandit-report.json
        
  # Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        pip install flake8 black isort
        
    - name: Run code formatting check
      run: |
        cd assignment-11/backend
        black --check app/ tests/
        isort --check-only app/ tests/
        
    - name: Run linting
      run: |
        cd assignment-11/backend
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
  # Build and Deploy (Optional)
  build-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Build frontend
      run: |
        cd assignment-11/frontend
        npm ci
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          assignment-11/frontend/dist/
          assignment-11/backend/
        
  # Notifications
  notifications:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üéâ Coverage targets met!"
        echo "üöÄ Ready for deployment!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Some tests failed!"
        echo "üîç Please check the logs for details."
        echo "üìä Coverage may be below target."
        
    # Optional: Telegram notification
    - name: Send Telegram notification on success
      if: success() && secrets.TELEGRAM_BOT_TOKEN
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚úÖ **CI/CD Pipeline Success**
          
          üèóÔ∏è Project: Assignment 11
          üìä Coverage: 90%+
          üß™ Tests: All passed
          üîí Security: Clean
          üìù Quality: Excellent
          
          üöÄ Ready for deployment!
          
    - name: Send Telegram notification on failure
      if: failure() && secrets.TELEGRAM_BOT_TOKEN
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚ùå **CI/CD Pipeline Failed**
          
          üèóÔ∏è Project: Assignment 11
          üîç Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Please review and fix the issues. 